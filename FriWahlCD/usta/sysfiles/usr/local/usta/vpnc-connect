#!/bin/sh

#
# $Id: vpnc-connect 401 2011-01-09 18:33:05Z mariop $
#


`cat /proc/sys/kernel/modprobe` tun 2>/dev/null
if [ $? != 0 ]; then
	echo -e "WARNING: failed to load the tun module\n";
fi

if [ -f "$1" ]; then
	config="$1"
elif [ -f "/etc/vpnc/$1.conf" ]; then
	config="/etc/vpnc/$1.conf"
elif [ -f /etc/vpnc/default.conf ]; then
	config=/etc/vpnc/default.conf
elif [ -f /etc/vpnc.conf ]; then
	config=/etc/vpnc.conf
else 
     echo <<ECHO 1>&2
Usage: $0 [config]

 <config> can either be an absolute path or the name
 of a config file located in /etc/vpnc/<config>.conf
 If no config is specified, $0 will try
 /etc/vpnc/default.conf and /etc/vpnc.conf

ECHO
exit 1
fi

# fix for broken devfs in kernel 2.6.x
if [ "`readlink /dev/net/tun`" = misc/net/tun \
   -a ! -e /dev/net/misc/net/tun -a -e /dev/misc/net/tun ] ; then
   ln -sf /dev/misc/net/tun /dev/net/tun
fi

# make sure tun device exists
if [ ! -e /dev/net/tun ]; then
	mkdir -p /dev/net
	mknod /dev/net/tun c 10 200
fi

# usual blah, blah, if the command above still failed
test -e /dev/net/tun || echo -e "Warning, /dev/net/tun does not exist.\nPossible reasons:\n - tun driver not available\n - device file needs to be created (howto: cd /dev; /sbin/MAKEDEV tun) "

getvar () {
	if [ $# -ne 2 ]; then
		echo "Usage: $0 <parameter file> <variable name>" 1>&2
		return 1
	fi
	sed -n 's/^'"$2"' //p' "${config}"
	return 0
}

fix_ip_get_output () {
	sed 's/cache//;s/metric[0-9]\+ [0-9]\+//g' | xargs echo
}

defr=/var/run/vpnc/defaultroute
gateway=/var/run/vpnc/gateway
pid=/var/run/vpnc/pid

if [ -x "`which vpnc`" ]; then
	VPNC="`which vpnc`"
elif [ -x /usr/local/sbin/vpnc ]; then
	VPNC=/usr/sbin/vpnc
elif [ -x /usr/sbin/vpnc ]; then
	VPNC=/usr/sbin/vpnc
elif [ -x $(dirname $0)/vpnc ]; then
	VPNC=$(dirname $0)/vpnc
else
	echo No vpnc daemon found, aborting...
	exit 1
fi

for i in "$gateway" "$defr" "$pid"; do
	mkdir -p $(dirname "$i")
done

PID="$(cat "$pid" 2> /dev/null)"

if [ "$PID" ]; then
	if kill -0 "$PID" > /dev/null 2>&1; then
		echo "vpnc found running (pid: $PID, pidfile: $pid)"
		exit 1
	fi
fi

GW="$(getvar "${config}" "IPSec gateway")"
if [ ! "`echo "$GW" | grep ^[[:digit:]]`" ] ; then
	if [ "`which getent`" ] ; then
		GW=`getent hosts "$GW" | sed -e 's/\ .*//'`
	elif [ "`which dig`" ] ; then
		GW=`dig "$GW" | grep "^$GW" | sed -e 's/.*\t//g'`
	elif [ "`which ping`" ] ; then
		GW=`ping "$GW" -c1 -t1| head -n1 | sed -e 's/.*(//; s/).*//'`
	else
		echo "Please enter the Gateway address as IP or install dnsutils"
		exit 1
	fi
fi

"$VPNC" --pid-file "$pid" --dpd-idle 0 "${config}" || exit 1
dev=$(getvar "${config}" "Interface name")
test -z "$dev" && dev=vpnlink
networks="$(getvar "${config}" "Target networks")"
if [ -z "$networks" ]; then
    ip route add $(ip route get $GW | fix_ip_get_output)
    ip route | grep '^default' | fix_ip_get_output > "$defr"
    echo "$GW" > "$gateway"
    networks=default
fi
for network in $networks; do
    ip route del $network 2>/dev/null
    ip route add $network dev $dev
done
ip route flush cache
exit 0
